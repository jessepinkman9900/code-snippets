[private]
default:
    just --list

# install & setup dependencies/tools
[group('dev')]
init:
  mise install

# alias k := cluster-up
# # create dev k3d cluster
# [group('dev')]
# cluster-up:
#   k3d cluster create local-k3s --image rancher/k3s:v1.26.4-k3s1

# alias kd := cluster-down
# # delete dev k3d cluster
# [group('dev')]
# cluster-down:
#   k3d cluster delete local-k3s

[group('aws')]
up-network env="test":
  cd terraform/environments/{{env}}/aws/0_network && dotenvx run -f .env -- terraform init && dotenvx run -f .env -- terraform apply -var-file=terraform.tfvars
  echo "Network created"
  echo "Before running just up-rancher, update terraform/environments/{{env}}/aws/1_rancher/terraform.tfvars with vpc_id and public_subnet_id"

[group('aws')]
up-rancher env="test":
  cd terraform/environments/{{env}}/aws/1_rancher && dotenvx run -f .env -- terraform init && dotenvx run -f .env -- terraform apply -var-file=terraform.tfvars
  echo "Rancher server created"
  echo "Before running just up-cluster, update terraform/environments/{{env}}/aws/2_clusters/terraform.tfvars with vpc_id and public_subnet_id & update secret.tfvars with rancher api key and secret"

[group('aws')]
up-cluster env="test":
  cd terraform/environments/{{env}}/aws/2_clusters && dotenvx run -f .env -- terraform init && dotenvx run -f .env -- terraform apply -var-file=terraform.tfvars -var-file=secret.tfvars
  echo "EKS clusters created"

[group('aws')]
down env="test":
  cd terraform/environments/{{env}}/aws/2_clusters && dotenvx run -f .env -- terraform destroy
  cd terraform/environments/{{env}}/aws/1_rancher && dotenvx run -f .env -- terraform destroy
  cd terraform/environments/{{env}}/aws/0_network && dotenvx run -f .env -- terraform destroy
  echo "All resources deleted"

[group('aws')]
down-cluster env="test":
  cd terraform/environments/{{env}}/aws/2_clusters && dotenvx run -f .env -- terraform destroy
  echo "EKS clusters deleted"

[group('aws')]
down-rancher env="test":
  cd terraform/environments/{{env}}/aws/1_rancher && dotenvx run -f .env -- terraform destroy
  echo "Rancher server deleted"

[group('aws')]
down-network env="test":
  cd terraform/environments/{{env}}/aws/0_network && dotenvx run -f .env -- terraform destroy
  echo "Network deleted"

# apply cluster groups & gitrepos
[group('aws')]
fleet-apply-all env="test":
  echo "Applying cluster groups"
  kubectl --kubeconfig terraform/environments/{{env}}/aws/1_rancher/.output/{{env}}/rancher_node/kube_config_server.yaml apply -f fleet/cluster-groups/{{env}}.yaml
  echo "Applying gitrepos"
  kubectl --kubeconfig terraform/environments/{{env}}/aws/1_rancher/.output/{{env}}/rancher_node/kube_config_server.yaml apply -f fleet/gitrepos/istio/istio-all.yaml

[group('aws')]
fleet-apply-cluster-group env="test":
  echo "Applying cluster groups"
  kubectl --kubeconfig terraform/environments/{{env}}/aws/1_rancher/.output/{{env}}/rancher_node/kube_config_server.yaml apply -f fleet/cluster-groups/{{env}}.yaml

[group('aws')]
fleet-apply-gitrepo env="test":
  echo "Applying gitrepos"
  kubectl --kubeconfig terraform/environments/{{env}}/aws/1_rancher/.output/{{env}}/rancher_node/kube_config_server.yaml apply -f fleet/gitrepos/istio/istio-all.yaml
