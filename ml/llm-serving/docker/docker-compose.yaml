services:
  vllm-server:
    image: vllm/vllm-openai:v0.10.0
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8000:8000"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    environment:
      - HUGGING_FACE_HUB_TOKEN=${HF_TOKEN}
    ipc: host
    command: [
      "--model", "google/gemma-3-1b-it",
      "--gpu-memory-utilization", "0.9",
      "--max-model-len", "2048",
      "--max-num-seqs", "32",
      "--max-num-batched-tokens", "4096",
      "--enable-chunked-prefill",
      "--dtype", "float16"
    ]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  open-webui:
    image: ghcr.io/open-webui/open-webui:v0.6.22
    ports:
      - "3000:8080"
    volumes:
      - ./.data-open-webui:/app/backend/data
    environment:
      - OPENAI_API_BASE_URL=http://vllm-server:8000/v1
      - WEBUI_AUTH=False
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # observability
  prometheus:
    image: prom/prometheus:v3.5.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    
  grafana:
    image: grafana/grafana:9.5.1
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./dashboard.json:/etc/grafana/dashboards/dashboard.json
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=

  # mlflow
  mlflow:
    image: ghcr.io/mlflow/mlflow:v3.2.0
    ports:
      - "5000:5000"
    volumes:
      - mlflow-data:/mlflow/mlruns
    command: mlflow server --host 0.0.0.0 --port 5000
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://mlflow:5000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s

volumes:
  grafana-data:
  mlflow-data:
