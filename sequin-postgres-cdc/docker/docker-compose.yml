name: sequin
services:
  sequin:
    image: sequin/sequin:latest
    pull_policy: always
    ports:
      - "7376:7376"
    environment:
      - PG_HOSTNAME=sequin_postgres
      - PG_DATABASE=sequin
      - PG_PORT=5432
      - PG_USERNAME=postgres
      - PG_PASSWORD=postgres
      - PG_POOL_SIZE=20
      - SECRET_KEY_BASE=wDPLYus0pvD6qJhKJICO4dauYPXfO/Yl782Zjtpew5qRBDp7CZvbWtQmY0eB13If
      - VAULT_KEY=2Sig69bIpuSm2kv0VQfDekET2qy8qUZGI8v3/h3ASiY=
      - REDIS_URL=redis://sequin_redis:6379
      - CONFIG_FILE_PATH=/config/playground.yml
    volumes:
      - ./playground.yml:/config/playground.yml
    depends_on:
      sequin_redis:
        condition: service_started
      sequin_postgres:
        condition: service_healthy
  sequin_postgres:
    image: postgres:16
    ports:
      - "7377:5432"
    environment:
      - POSTGRES_DB=sequin
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    command: ["postgres", "-c", "wal_level=logical"]
    volumes:
      - sequin_postgres_data:/var/lib/postgresql/data
      # Creates a sample database for Sequin's Quickstart guide
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sequin"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 2s
      start_interval: 1s
  sequin_redis:
    image: redis:7
    ports:
      - "7378:6379"
    command: ["redis-server", "--port", "6379"]
    volumes:
      - sequin_redis_data:/data
  redis_insight:
    image: redislabs/redisinsight:2.70
    container_name: redis_insight
    ports:
      - "5540:5540"
    environment:
      - RI_REDIS_HOST=sequin_redis
      - RI_REDIS_PORT=6379
      - RI_REDIS_ALIAS=sequin_redis
    volumes:
      - redis_insight_data:/db
    depends_on:
      - sequin_redis
  sequin_prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  sequin_grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - sequin_prometheus
    volumes:
      - sequin_grafana_data:/var/lib/grafana
      - ./grafana_datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana_dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./dashboard.json:/etc/grafana/dashboards/dashboards/sequin.json
  kafka:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Auto-create topics
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9094:9094"
    healthcheck:
      test: ["CMD-SHELL", "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 5
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_READONLY: "false"
    depends_on:
      kafka:
        condition: service_healthy
  init-topic:
    image: apache/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "/opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:9092  --create --if-not-exists  --topic postgres-cdc  --partitions 1  --replication-factor 1"

volumes:
  sequin_postgres_data:
  sequin_redis_data:
  redis_insight_data:
  sequin_grafana_data:

# Un-comment this to enable IPv6
# You may need to run
# `docker compose down --volumes --remove-orphans`
# to remove the existing network and start fresh
#
# networks:
#   default:
#     enable_ipv6: true
#     ipam:
#       config:
#         - subnet: "2001:db8:1::/64"
